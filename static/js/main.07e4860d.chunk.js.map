{"version":3,"sources":["components/Loading.js","components/StockChart.js","components/Stock.js","components/Feed.js","App.js","serviceWorker.js","index.js"],"names":["Loading","className","role","StockChart","props","id","chartid","height","width","style","border","Stock","stock","symbol","price","justUpdated","gain","loss","priceDiff","parseFloat","slice","toFixed","length","showGraph","ctx","document","getElementById","childNodes","parentElement","classList","contains","Array","from","getElementsByClassName","forEach","element","add","data","labels","datasets","label","toUpperCase","reverse","backgroundColor","borderColor","fill","lineTension","radius","Chart","type","options","responsive","maintainAspectRatio","title","display","position","text","fontSize","fontColor","generateChart","remove","time","onMouseEnter","onMouseLeave","Feed","stocksArray","stockMap","entries","map","item","ticker","value","justUpdatedStocks","indexOf","timeDiff","Date","now","date","sort","a","b","textAlign","key","App","state","loadingFeed","connected","Map","componentDidMount","mediaNetSocket","WebSocket","onopen","socketOpened","onclose","socketClosed","onmessage","message","stockUpdates","JSON","parse","push","hours","getHours","ampm","toString","padStart","getMinutes","getSeconds","has","oldStockEntry","get","set","setState","console","log","this","size","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.07e4860d.chunk.js","sourcesContent":["import React from \"react\";\n\nfunction Loading() {\n  return (\n    <div className=\"loading\">\n      <div className=\"spinner-grow text-primary\" role=\"status\">\n        <span className=\"sr-only\">Loading...</span>\n      </div>\n      <small className=\"text-muted\">Fetching data from server</small>\n    </div>\n  );\n}\n\nexport default Loading;\n","import React from \"react\";\n\nfunction StockChart(props) {\n  return (\n    <div id={props.chartid} className=\"chart hide\">\n      <canvas\n        height=\"200\"\n        width=\"200\"\n        style={{ border: \"solid 1px #dee2e6\" }}\n      />\n    </div>\n  );\n}\n\nexport default StockChart;\n","import React from \"react\";\nimport StockChart from \"./StockChart\";\nimport Chart from \"chart.js\";\n\nfunction Stock(props) {\n  const { symbol, price } = props.stock;\n  const justUpdated = props.justUpdated;\n  let gain = false;\n  let loss = false;\n  // let nodiff = false;\n  let priceDiff = parseFloat(price.slice(-1) - price.slice(-2, -1)).toFixed(2);\n  if (price.length > 1) {\n    gain = priceDiff > 0 && justUpdated;\n    loss = priceDiff < 0 && justUpdated;\n    // nodiff = priceDiff == 0 && justUpdated;\n  }\n\n  const generateChart = ctx => {\n    ctx.height = 200;\n    ctx.width = 200;\n    const options = {\n      responsive: true,\n      maintainAspectRatio: false,\n      title: {\n        display: true,\n        position: \"top\",\n        text: \"Stock Performance\",\n        fontSize: 14,\n        fontColor: \"#111\"\n      }\n    };\n\n    //line chart data\n    const data = {\n      labels: [\"\", \"\", \"\", \"\", \"\"],\n      datasets: [\n        {\n          label: symbol.toUpperCase(),\n          data: [...price]\n            .reverse()\n            .slice(0, 5)\n            .reverse(),\n          backgroundColor: gain ? \"green\" : loss ? \"red\" : \"blue\",\n          borderColor: gain ? \"lightgreen\" : loss ? \"lightred\" : \"lightblue\",\n          fill: false,\n          lineTension: 0,\n          radius: 5\n        }\n      ]\n    };\n\n    var myLineChart = new Chart(ctx, {\n      type: \"line\",\n      data,\n      options\n    });\n  };\n\n  const showGraph = () => {\n    // console.log(price);\n    let ctx = document.getElementById(symbol).childNodes[0];\n    if (!ctx.parentElement.classList.contains(\"hide\")) {\n      Array.from(document.getElementsByClassName(\"chart\")).forEach(element => {\n        element.classList.add(\"hide\");\n      });\n    } else {\n      Array.from(document.getElementsByClassName(\"chart\")).forEach(element => {\n        element.classList.add(\"hide\");\n      });\n      generateChart(ctx);\n      document.getElementById(symbol).classList.remove(\"hide\");\n    }\n  };\n\n  // const timeDiff = Math.round(props.timeDiff / 1000);\n  return (\n    <tr>\n      <td>{symbol.toUpperCase()}</td>\n      <td className={gain ? \"green\" : loss ? \"red\" : \"\"}>\n        $ {price.slice(-1)}\n        {gain && <i className=\"fas fa-caret-up\" />}\n        {gain && <span> (+{priceDiff}) </span>}\n        {loss && <i className=\"fas fa-caret-down\" />}\n        {loss && <span> ({priceDiff}) </span>}\n        {/* {!justUpdated && <i className=\"fas fa-caret-left\" />}\n        {!justUpdated && <i className=\"fas fa-caret-right\" />} */}\n      </td>\n      <td className=\"text-secondary\">\n        {justUpdated ? <p>Just Now</p> : <p>{props.stock.time}</p>}\n        {/* {timeDiff > 5 && timeDiff < 60 && (\n          <p className=\"text-muted\">A few seconds ago</p>\n        )} */}\n      </td>\n      <td className=\"show-chart\">\n        <span\n          onMouseEnter={() => {\n            showGraph();\n          }}\n          onMouseLeave={() => {\n            showGraph();\n          }}\n        >\n          <i className=\"fas fa-chart-line\" />\n        </span>\n        <StockChart chartid={symbol} />\n      </td>\n    </tr>\n  );\n}\n\nexport default Stock;\n","import React from \"react\";\nimport Stock from \"./Stock\";\n\nfunction Feed(props) {\n  let stocksArray = Array.from(props.stockMap.entries()).map(item => {\n    return {\n      ticker: item[0],\n      value: item[1],\n      justUpdated: props.justUpdatedStocks.indexOf(item[0]) !== -1,\n      timeDiff: Date.now() - item[1].date\n    };\n  });\n  // console.log(\"stocksArray\", stocksArray);\n\n  stocksArray = stocksArray.sort((a, b) => {\n    if (a.ticker < b.ticker) return -1;\n    else return 1;\n  });\n\n  return (\n    <table\n      className=\"table table-sm table-bordered\t\"\n      style={{ textAlign: \"center\" }}\n    >\n      <thead className=\"thead-dark\">\n        <tr>\n          <th>Ticker</th>\n          <th>Price</th>\n          <th>Last Updated</th>\n          <th className=\"mobile-hide\">Show Graph</th>\n        </tr>\n      </thead>\n      <tbody>\n        {stocksArray.map(item => {\n          return (\n            <Stock\n              key={item.value.symbol}\n              stock={item.value}\n              justUpdated={item.justUpdated}\n              timeDiff={item.timeDiff}\n            />\n          );\n        })}\n      </tbody>\n    </table>\n  );\n}\n\nexport default Feed;\n","import React from \"react\";\nimport \"./App.css\";\nimport Loading from \"./components/Loading\";\nimport Feed from \"./components/Feed\";\n\nclass App extends React.Component {\n  state = {\n    loadingFeed: true,\n    connected: false,\n    stockMap: new Map(),\n    justUpdatedStocks: []\n  };\n\n  componentDidMount = () => {\n    const mediaNetSocket = new WebSocket(\"ws://stocks.mnet.website\");\n    mediaNetSocket.onopen = this.socketOpened;\n    mediaNetSocket.onclose = this.socketClosed;\n\n    // let count = 5;\n    mediaNetSocket.onmessage = message => {\n      // count--;\n      // if (count === 0) mediaNetSocket.close();\n      const stockUpdates = JSON.parse(message.data);\n      // console.log(\"stockUpdates\", stockUpdates);\n\n      const stockMap = this.state.stockMap;\n      const justUpdatedStocks = [];\n\n      stockUpdates.forEach(item => {\n        const symbol = item[0];\n        justUpdatedStocks.push(symbol);\n        const price = parseFloat(item[1]).toFixed(3);\n        let time = new Date();\n        let hours =\n          time.getHours() >= 12 ? time.getHours() - 12 : time.getHours();\n        let ampm = time.getHours() >= 12 ? \" pm\" : \" am\";\n\n        time = `${hours.toString().padStart(2, \"0\")}:${time\n          .getMinutes()\n          .toString()\n          .padStart(2, \"0\")}:${time\n          .getSeconds()\n          .toString()\n          .padStart(2, \"0\")} ${ampm}`;\n\n        if (!this.state.stockMap.has(symbol)) {\n          stockMap.set(symbol, {\n            symbol,\n            price: [price],\n            time,\n            date: Date.now()\n          });\n        } else {\n          let oldStockEntry = stockMap.get(symbol);\n          oldStockEntry.price.push(price);\n          oldStockEntry.time = time;\n          oldStockEntry.date = Date.now();\n        }\n      });\n      this.setState({\n        stockMap,\n        justUpdatedStocks\n      });\n    };\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <main role=\"main\" className=\"flex-shrink-0\">\n          <div className=\"container\">\n            <h1 className=\"mt-5\">\n              Live Stock Feed <i className=\"fas fa-chart-line\" />\n            </h1>\n            <div style={{ position: \"relative\" }}>\n              {this.state.connected ? (\n                <span className=\"badge badge-success\">Connected</span>\n              ) : (\n                <span className=\"badge badge-danger\">Disconnected</span>\n              )}\n              <p className=\"lead\">Watch the Stock prices update in Real Time</p>\n              {this.state.loadingFeed || this.state.stockMap.size === 0 ? (\n                <Loading />\n              ) : (\n                <Feed\n                  stockMap={this.state.stockMap}\n                  justUpdatedStocks={this.state.justUpdatedStocks}\n                />\n              )}\n            </div>\n          </div>\n        </main>\n      </div>\n    );\n  }\n\n  socketOpened = () => {\n    console.log(\"WebSocket connection is open now.\");\n    this.setState({\n      loadingFeed: false,\n      connected: true\n    });\n  };\n\n  socketClosed = () => {\n    console.log(\"WebSocket connection is Closed.\");\n    this.setState({\n      connected: false\n    });\n  };\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}