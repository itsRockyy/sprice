{"version":3,"sources":["components/Loading.js","components/Stock.js","components/Feed.js","App.js","serviceWorker.js","index.js"],"names":["Loading","react_default","a","createElement","className","role","Stock","props","_props$stock","stock","symbol","price","justUpdated","toUpperCase","time","Feed","stocksArray","Array","from","stockMap","entries","map","item","value","justUpdatedStocks","indexOf","console","log","style","textAlign","components_Stock","key","App","state","loadingFeed","connected","Map","componentDidMount","mediaNetSocket","WebSocket","onopen","_this","socketOpened","onclose","socketClosed","onmessage","message","stockUpdates","JSON","parse","data","forEach","push","parseFloat","toFixed","Date","hours","getHours","ampm","concat","getMinutes","has","oldStockEntry","get","date","now","set","setState","setTimeout","close","this","components_Loading","components_Feed","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9e9d6ada.chunk.js","sourcesContent":["import React from \"react\";\n\nfunction Loading() {\n  return (\n    <div className=\"loading\">\n      <div className=\"spinner-grow text-primary\" role=\"status\">\n        <span className=\"sr-only\">Loading...</span>\n      </div>\n      <small className=\"text-muted\">Fetching data from server</small>\n    </div>\n  );\n}\n\nexport default Loading;\n","import React from \"react\";\n\nfunction Stock(props) {\n  // console.log(props.stock.price);\n\n  const { symbol, price } = props.stock;\n  const justUpdated = props.justUpdated;\n  // const timeDiff = Math.round(props.timeDiff / 1000);\n\n  return (\n    <tr>\n      <td>{symbol.toUpperCase()}</td>\n      <td>$ {price[0]}</td>\n      <td>\n        {justUpdated ? <p>Just Now</p> : <p>{props.stock.time}</p>}\n        {/* {timeDiff > 10 && <p className=\"text-muted\">{timeDiff} seconds ago</p>} */}\n      </td>\n    </tr>\n  );\n}\n\nexport default Stock;\n","import React from \"react\";\nimport Stock from \"./Stock\";\n\nfunction Feed(props) {\n  const stocksArray = Array.from(props.stockMap.entries()).map(item => {\n    return {\n      value: item[1],\n      justUpdated: props.justUpdatedStocks.indexOf(item[0]) !== -1\n      // timeDiff: Date.now() - item[1].date\n    };\n  });\n  console.log(\"stocksArray\", stocksArray);\n\n  return (\n    <table className=\"table\" style={{ textAlign: \"center\" }}>\n      <thead className=\"thead-dark\">\n        <tr>\n          <th>Ticker</th>\n          <th>Price</th>\n          <th>Last Update</th>\n        </tr>\n      </thead>\n      <tbody>\n        {stocksArray.map(item => {\n          return (\n            <Stock\n              key={item.value.symbol}\n              stock={item.value}\n              justUpdated={item.justUpdated}\n              // timeDiff={item.timeDiff}\n            />\n          );\n        })}\n      </tbody>\n    </table>\n  );\n}\n\nexport default Feed;\n","import React from \"react\";\nimport \"./App.css\";\nimport Loading from \"./components/Loading\";\nimport Feed from \"./components/Feed\";\n\nclass App extends React.Component {\n  state = {\n    loadingFeed: true,\n    connected: false,\n    stockMap: new Map(),\n    justUpdatedStocks: []\n  };\n\n  componentDidMount = () => {\n    const mediaNetSocket = new WebSocket(\"ws://stocks.mnet.website\");\n    mediaNetSocket.onopen = this.socketOpened;\n    mediaNetSocket.onclose = this.socketClosed;\n\n    mediaNetSocket.onmessage = message => {\n      const stockUpdates = JSON.parse(message.data);\n      // console.log(\"stockUpdates\", stockUpdates);\n\n      const stockMap = this.state.stockMap;\n      const justUpdatedStocks = [];\n\n      stockUpdates.forEach(item => {\n        const symbol = item[0];\n        justUpdatedStocks.push(symbol);\n        const price = parseFloat(item[1]).toFixed(3);\n        let time = new Date();\n        let hours =\n          time.getHours() >= 12 ? time.getHours() - 12 : time.getHours();\n        let ampm = time.getHours() >= 12 ? \"P.M.\" : \"A.M.\";\n\n        time = `${hours}:${time.getMinutes()} ${ampm}`;\n\n        if (!this.state.stockMap.has(symbol)) {\n          stockMap.set(symbol, {\n            symbol,\n            price: [price],\n            time,\n            date: Date.now()\n          });\n        } else {\n          let oldStockEntry = stockMap.get(symbol);\n          oldStockEntry.price.push(price);\n          oldStockEntry.time = time;\n          oldStockEntry.date = Date.now();\n        }\n      });\n\n      // console.log(\"justUpdatedStocks\", justUpdatedStocks);\n\n      this.setState({\n        stockMap,\n        justUpdatedStocks\n      });\n    };\n\n    setTimeout(() => {\n      mediaNetSocket.close();\n    }, 5000);\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <main role=\"main\" className=\"flex-shrink-0\">\n          <div className=\"container\">\n            <h1 className=\"mt-5\">Live Stock Feed</h1>\n\n            {this.state.connected ? (\n              <span className=\"badge badge-success\">Connected</span>\n            ) : (\n              <span className=\"badge badge-danger\">Disconnected</span>\n            )}\n            <p className=\"lead\">Watch the Stock prices update in Real Time</p>\n            <div className=\"card mb-3\">\n              <div className=\"card-body\">\n                {this.state.loadingFeed ? (\n                  <Loading />\n                ) : (\n                  <Feed\n                    stockMap={this.state.stockMap}\n                    justUpdatedStocks={this.state.justUpdatedStocks}\n                  />\n                )}\n              </div>\n            </div>\n          </div>\n        </main>\n      </div>\n    );\n  }\n\n  socketOpened = () => {\n    console.log(\"WebSocket connection is open now.\");\n    this.setState({\n      loadingFeed: false,\n      connected: true\n    });\n  };\n\n  socketClosed = () => {\n    console.log(\"WebSocket connection is Closed.\");\n    this.setState({\n      connected: false\n    });\n  };\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}