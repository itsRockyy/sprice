{"version":3,"sources":["components/Loading.js","components/Feed.js","App.js","serviceWorker.js","index.js"],"names":["Loading","react_default","a","createElement","className","role","Feed","props","style","textAlign","stocks","map","item","key","symbol","price","date","App","state","loadingFeed","connected","stockMap","Map","stocksArray","componentDidMount","exampleSocket","WebSocket","onopen","_this","socketOpened","onclose","socketClosed","onmessage","message","stockUpdates","JSON","parse","data","element","ticker","parseFloat","toFixed","Date","now","forEach","set","setState","updatedStockArray","value","push","concat","setTimeout","close","console","log","this","components_Loading","components_Feed","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+NAaeA,MAXf,WACE,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,4BAA4BC,KAAK,UAC9CJ,EAAAC,EAAAC,cAAA,QAAMC,UAAU,WAAhB,eAEFH,EAAAC,EAAAC,cAAA,SAAOC,UAAU,cAAjB,+BCmBSE,MAzBf,SAAcC,GACZ,OACEN,EAAAC,EAAAC,cAAA,SAAOC,UAAU,QAAQI,MAAO,CAAEC,UAAW,WAC3CR,EAAAC,EAAAC,cAAA,SAAOC,UAAU,cACfH,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,oBACAF,EAAAC,EAAAC,cAAA,mBACAF,EAAAC,EAAAC,cAAA,2BAGJF,EAAAC,EAAAC,cAAA,aACGI,EAAMG,OAAOC,IAAI,SAAAC,GAChB,OACEX,EAAAC,EAAAC,cAAA,MAAIU,IAAKD,EAAKE,QACZb,EAAAC,EAAAC,cAAA,UAAKS,EAAKE,QACVb,EAAAC,EAAAC,cAAA,UAAKS,EAAKG,OACVd,EAAAC,EAAAC,cAAA,UAAKS,EAAKI,YCiFTC,6MA7FbC,MAAQ,CACNC,aAAa,EACbC,WAAW,EACXC,SAAU,IAAIC,IACdC,YAAa,MAGfC,kBAAoB,WAClB,IAAMC,EAAgB,IAAIC,UAAU,4BACpCD,EAAcE,OAASC,EAAKC,aAC5BJ,EAAcK,QAAUF,EAAKG,aAE7BN,EAAcO,UAAY,SAAAC,GACxB,IAAIC,EAAeC,KAAKC,MAAMH,EAAQI,MACtCH,EAAeA,EAAavB,IAAI,SAAA2B,GAC9B,MAAO,CACLC,OAAQD,EAAQ,GAChBvB,MAAOyB,WAAWF,EAAQ,IAAIG,QAAQ,GACtCzB,KAAM0B,KAAKC,SAIf,IAAIhC,EAAM,IAAIW,IACdY,EAAaU,QAAQ,SAAAN,GACnB3B,EAAIkC,IAAIP,EAAQC,OAAQ,CACtBzB,OAAQwB,EAAQC,OAChBxB,MAAOuB,EAAQvB,MACfC,KAAMsB,EAAQtB,SAIlBY,EAAKkB,SAAS,CACZzB,SAAUV,IAIZ,IAAIoC,EAAoB,GACxBnB,EAAKV,MAAMG,SAASuB,QAAQ,SAAAI,GAAK,OAAID,EAAkBE,KAAKD,KAE5DpB,EAAKkB,SAAS,CACZvB,YAAW,GAAA2B,OAAMH,MAIrBI,WAAW,WACT1B,EAAc2B,SACb,QA+BLvB,aAAe,WACbwB,QAAQC,IAAI,qCACZ1B,EAAKkB,SAAS,CACZ3B,aAAa,EACbC,WAAW,OAIfW,aAAe,WACbsB,QAAQC,IAAI,mCACZ1B,EAAKkB,SAAS,CACZ1B,WAAW,6EAtCb,OACEnB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,QAAME,KAAK,OAAOD,UAAU,iBAC1BH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,QAAd,mBAECmD,KAAKrC,MAAME,UACVnB,EAAAC,EAAAC,cAAA,QAAMC,UAAU,uBAAhB,aAEAH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,sBAAhB,gBAEFH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,QAAb,8CACAH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACZmD,KAAKrC,MAAMC,YACVlB,EAAAC,EAAAC,cAACqD,EAAD,MAEAvD,EAAAC,EAAAC,cAACsD,EAAD,CAAM/C,OAAQ6C,KAAKrC,MAAMK,0BApEzBmC,IAAMC,WCOJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOjE,EAAAC,EAAAC,cAACgE,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.03e45e9b.chunk.js","sourcesContent":["import React from \"react\";\n\nfunction Loading() {\n  return (\n    <div className=\"loading\">\n      <div className=\"spinner-grow text-primary\" role=\"status\">\n        <span className=\"sr-only\">Loading...</span>\n      </div>\n      <small className=\"text-muted\">Fetching data from server</small>\n    </div>\n  );\n}\n\nexport default Loading;\n","import React from \"react\";\n\nfunction Feed(props) {\n  return (\n    <table className=\"table\" style={{ textAlign: \"center\" }}>\n      <thead className=\"thead-dark\">\n        <tr>\n          <th>Ticker</th>\n          <th>Price</th>\n          <th>Last Update</th>\n        </tr>\n      </thead>\n      <tbody>\n        {props.stocks.map(item => {\n          return (\n            <tr key={item.symbol}>\n              <td>{item.symbol}</td>\n              <td>{item.price}</td>\n              <td>{item.date}</td>\n            </tr>\n          );\n        })}\n      </tbody>\n    </table>\n  );\n}\n\nexport default Feed;\n","import React from \"react\";\nimport \"./App.css\";\nimport Loading from \"./components/Loading\";\nimport Feed from \"./components/Feed\";\n\nclass App extends React.Component {\n  state = {\n    loadingFeed: true,\n    connected: false,\n    stockMap: new Map(),\n    stocksArray: []\n  };\n\n  componentDidMount = () => {\n    const exampleSocket = new WebSocket(\"ws://stocks.mnet.website\");\n    exampleSocket.onopen = this.socketOpened;\n    exampleSocket.onclose = this.socketClosed;\n\n    exampleSocket.onmessage = message => {\n      let stockUpdates = JSON.parse(message.data);\n      stockUpdates = stockUpdates.map(element => {\n        return {\n          ticker: element[0],\n          price: parseFloat(element[1]).toFixed(4),\n          date: Date.now()\n        };\n      });\n\n      let map = new Map();\n      stockUpdates.forEach(element => {\n        map.set(element.ticker, {\n          symbol: element.ticker,\n          price: element.price,\n          date: element.date\n        });\n      });\n\n      this.setState({\n        stockMap: map\n      });\n\n      // console.log(this.state);\n      let updatedStockArray = [];\n      this.state.stockMap.forEach(value => updatedStockArray.push(value));\n      // console.log(b);\n      this.setState({\n        stocksArray: [...updatedStockArray]\n      });\n    };\n\n    setTimeout(() => {\n      exampleSocket.close();\n    }, 5000);\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <main role=\"main\" className=\"flex-shrink-0\">\n          <div className=\"container\">\n            <h1 className=\"mt-5\">Live Stock Feed</h1>\n\n            {this.state.connected ? (\n              <span className=\"badge badge-success\">Connected</span>\n            ) : (\n              <span className=\"badge badge-danger\">Disconnected</span>\n            )}\n            <p className=\"lead\">Watch the Stock prices update in Real Time</p>\n            <div className=\"card mb-3\">\n              <div className=\"card-body\">\n                {this.state.loadingFeed ? (\n                  <Loading />\n                ) : (\n                  <Feed stocks={this.state.stocksArray} />\n                )}\n              </div>\n            </div>\n          </div>\n        </main>\n      </div>\n    );\n  }\n\n  socketOpened = () => {\n    console.log(\"WebSocket connection is open now.\");\n    this.setState({\n      loadingFeed: false,\n      connected: true\n    });\n  };\n\n  socketClosed = () => {\n    console.log(\"WebSocket connection is Closed.\");\n    this.setState({\n      connected: false\n    });\n  };\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}